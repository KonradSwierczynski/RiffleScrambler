\begin{Verbatim}[commandchars=\\\{\},codes={\catcode`\$=3\catcode`\^=7\catcode`\_=8}]
\PYG{c+cm}{/**$\label{impl::rs_str}$}
\PYG{c+cm}{* Hashowanie hasła za pomocą RiffleScrambler}
\PYG{c+cm}{* @param pwd Wskaźnik na hasło}
\PYG{c+cm}{* @param pwdlen\PYGZus{}bytes Długość hasła w bajtach}
\PYG{c+cm}{* @param salt Wskaźnik na sól}
\PYG{c+cm}{* @param saltlen\PYGZus{}bytes Długość soli w bajtach}
\PYG{c+cm}{* @param garlic Paremetr \PYGZdq{}g\PYGZdq{} oznaczający koszt pamięci}
\PYG{c+cm}{* @param depth Parametr \PYGZdq{}lambda\PYGZdq{} oznaczający koszt czasowy}
\PYG{c+cm}{* @param hash\PYGZus{}func Nazwa kryptograficznej funkcji skrótu do użycia wewnątrz}
\PYG{c+cm}{* @return Hash hasła jako ciąg znaków w systemie szesnastkowym}
\PYG{c+cm}{*/}
\PYG{n}{std}\PYG{o}{::}\PYG{n}{string} \PYG{n}{riffle\PYGZus{}scrambler}\PYG{p}{(}\PYG{k}{const} \PYG{k+kt}{void} \PYG{o}{*}\PYG{k}{const} \PYG{n}{pwd}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{size\PYGZus{}t} \PYG{n}{pwdlen\PYGZus{}bytes}\PYG{p}{,}
\PYG{k}{const} \PYG{k+kt}{void} \PYG{o}{*}\PYG{k}{const} \PYG{n}{salt}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{size\PYGZus{}t} \PYG{n}{saltlen\PYGZus{}bytes}\PYG{p}{,}
\PYG{k}{const} \PYG{k+kt}{uint64\PYGZus{}t} \PYG{n}{garlic}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{uint64\PYGZus{}t} \PYG{n}{depth}\PYG{p}{,}
\PYG{k}{const} \PYG{n}{std}\PYG{o}{::}\PYG{n}{string} \PYG{n}{hash\PYGZus{}func}\PYG{o}{=}\PYG{l+s}{\PYGZdq{}sha256\PYGZdq{}}\PYG{p}{);}


\PYG{c+cm}{/** $\label{impl::rs_vec}$}
\PYG{c+cm}{* Hashowanie hasła za pomocą RiffleScrambler}
\PYG{c+cm}{* @param garlic Paremetr \PYGZdq{}g\PYGZdq{} oznaczający koszt pamięci}
\PYG{c+cm}{* @param depth Parametr \PYGZdq{}lambda\PYGZdq{} oznaczający koszt czasowy}
\PYG{c+cm}{* @param pwd Wskaźnik na hasło}
\PYG{c+cm}{* @param pwdlen\PYGZus{}bytes Długość hasła w bajtach}
\PYG{c+cm}{* @param salt Wskaźnik na sól}
\PYG{c+cm}{* @param saltlen\PYGZus{}bytes Długość soli w bajtach}
\PYG{c+cm}{* @param hash\PYGZus{}func Nazwa kryptograficznej funkcji skrótu do użycia wewnątrz}
\PYG{c+cm}{* @return Hash hasła jako wektor znaków w systemie szesnastkowym}
\PYG{c+cm}{*/}
\PYG{n}{std}\PYG{o}{::}\PYG{n}{vector}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{unsigned} \PYG{k+kt}{char}\PYG{o}{\PYGZgt{}} \PYG{n}{riffle\PYGZus{}scrambler\PYGZus{}hash\PYGZus{}raw}\PYG{p}{(}\PYG{k}{const} \PYG{k+kt}{uint64\PYGZus{}t} \PYG{n}{garlic}\PYG{p}{,}
\PYG{k}{const} \PYG{k+kt}{uint64\PYGZus{}t} \PYG{n}{depth}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{void} \PYG{o}{*}\PYG{n}{pwd}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{size\PYGZus{}t} \PYG{n}{pwdlen\PYGZus{}bytes}\PYG{p}{,}
\PYG{k}{const} \PYG{k+kt}{void} \PYG{o}{*}\PYG{n}{salt}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{size\PYGZus{}t} \PYG{n}{saltlen\PYGZus{}bytes}\PYG{p}{,} \PYG{k}{const} \PYG{n}{std}\PYG{o}{::}\PYG{n}{string} \PYG{n}{hash\PYGZus{}func}\PYG{o}{=}\PYG{l+s}{\PYGZdq{}sha256\PYGZdq{}}\PYG{p}{);}


\PYG{c+cm}{/**$\label{impl::rs_enc}$}
\PYG{c+cm}{* Hashowanie hasła za pomocą RiffleScrambler}
\PYG{c+cm}{* kodowanie wyniku wraz z parametrami w jeden ciąg znaków}
\PYG{c+cm}{* @param garlic Paremetr \PYGZdq{}g\PYGZdq{} oznaczający koszt pamięci}
\PYG{c+cm}{* @param depth Parametr \PYGZdq{}lambda\PYGZdq{} oznaczający koszt czasowy}
\PYG{c+cm}{* @param pwd Wskaźnik na hasło}
\PYG{c+cm}{* @param pwdlen\PYGZus{}bytes Długość hasła w bajtach}
\PYG{c+cm}{* @param salt Wskaźnik na sól}
\PYG{c+cm}{* @param saltlen\PYGZus{}bytes Długość soli w bajtach}
\PYG{c+cm}{* @param hash\PYGZus{}func Nazwa kryptograficznej funkcji skrótu do użycia wewnątrz}
\PYG{c+cm}{* @return Zakodowane parametry funkcji wraz z hashem hasła i solą}
\PYG{c+cm}{*/}
\PYG{n}{std}\PYG{o}{::}\PYG{n}{string} \PYG{n}{riffle\PYGZus{}scrambler\PYGZus{}encoded}\PYG{p}{(}\PYG{k}{const} \PYG{k+kt}{uint64\PYGZus{}t} \PYG{n}{garlic}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{uint64\PYGZus{}t} \PYG{n}{depth}\PYG{p}{,}
\PYG{k}{const} \PYG{k+kt}{void} \PYG{o}{*}\PYG{n}{pwd}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{size\PYGZus{}t} \PYG{n}{pwdlen\PYGZus{}bytes}\PYG{p}{,}
\PYG{k}{const} \PYG{k+kt}{void} \PYG{o}{*}\PYG{n}{salt}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{size\PYGZus{}t} \PYG{n}{saltlen\PYGZus{}bytes}\PYG{p}{,} \PYG{k}{const} \PYG{n}{std}\PYG{o}{::}\PYG{n}{string} \PYG{n}{hash\PYGZus{}func}\PYG{o}{=}\PYG{l+s}{\PYGZdq{}sha256\PYGZdq{}}\PYG{p}{);}


\PYG{c+cm}{/** $\label{impl::rs_ver}$}
\PYG{c+cm}{* Weryfikacja hasha hasła z hashem zakodowanym hashem dla zakodowanych parametrów i soli}
\PYG{c+cm}{* @param encoded Zakodowane parametry wraz z hashem i solą}
\PYG{c+cm}{* @param pwd Wskaźnik na hasło}
\PYG{c+cm}{* @param pwd\PYGZus{}len Długość hasła w bajtach}
\PYG{c+cm}{* @return true jeśli hashe są równe, false w przeciwny przypadku}
\PYG{c+cm}{*/}
\PYG{k+kt}{bool} \PYG{n+nf}{riffle\PYGZus{}scrambler\PYGZus{}verify}\PYG{p}{(}\PYG{k}{const} \PYG{n}{std}\PYG{o}{::}\PYG{n}{string} \PYG{n}{encoded}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{void} \PYG{o}{*}\PYG{n}{pwd}\PYG{p}{,} \PYG{k}{const} \PYG{k+kt}{size\PYGZus{}t} \PYG{n}{pwd\PYGZus{}len}\PYG{p}{);}
\end{Verbatim}
